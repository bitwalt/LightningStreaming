# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import session_pb2 as session__pb2


class StreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.handshake = channel.unary_unary(
                '/Streamer/handshake',
                request_serializer=session__pb2.HandshakeRequest.SerializeToString,
                response_deserializer=session__pb2.HandshakeResponse.FromString,
                )
        self.looking = channel.unary_unary(
                '/Streamer/looking',
                request_serializer=session__pb2.MediaRequest.SerializeToString,
                response_deserializer=session__pb2.MediaResponse.FromString,
                )
        self.start_stream = channel.unary_unary(
                '/Streamer/start_stream',
                request_serializer=session__pb2.AskSwarm.SerializeToString,
                response_deserializer=session__pb2.ChunkResponse.FromString,
                )
        self.stream = channel.stream_stream(
                '/Streamer/stream',
                request_serializer=session__pb2.AskChunkPayment.SerializeToString,
                response_deserializer=session__pb2.ChunkResponse.FromString,
                )
        self.pay_chunk = channel.stream_stream(
                '/Streamer/pay_chunk',
                request_serializer=session__pb2.ChunkResponse.SerializeToString,
                response_deserializer=session__pb2.AskChunkPayment.FromString,
                )


class StreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def handshake(self, request, context):
        """Connect and accept client Messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def looking(self, request, context):
        """List all media available for streaming to the peer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_stream(self, request, context):
        """Start a streaming session 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream(self, request_iterator, context):
        """Streaming session of a Swarm server-side
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pay_chunk(self, request_iterator, context):
        """Streaming session of a Swarm client-side
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.handshake,
                    request_deserializer=session__pb2.HandshakeRequest.FromString,
                    response_serializer=session__pb2.HandshakeResponse.SerializeToString,
            ),
            'looking': grpc.unary_unary_rpc_method_handler(
                    servicer.looking,
                    request_deserializer=session__pb2.MediaRequest.FromString,
                    response_serializer=session__pb2.MediaResponse.SerializeToString,
            ),
            'start_stream': grpc.unary_unary_rpc_method_handler(
                    servicer.start_stream,
                    request_deserializer=session__pb2.AskSwarm.FromString,
                    response_serializer=session__pb2.ChunkResponse.SerializeToString,
            ),
            'stream': grpc.stream_stream_rpc_method_handler(
                    servicer.stream,
                    request_deserializer=session__pb2.AskChunkPayment.FromString,
                    response_serializer=session__pb2.ChunkResponse.SerializeToString,
            ),
            'pay_chunk': grpc.stream_stream_rpc_method_handler(
                    servicer.pay_chunk,
                    request_deserializer=session__pb2.ChunkResponse.FromString,
                    response_serializer=session__pb2.AskChunkPayment.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Streamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Streamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Streamer/handshake',
            session__pb2.HandshakeRequest.SerializeToString,
            session__pb2.HandshakeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def looking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Streamer/looking',
            session__pb2.MediaRequest.SerializeToString,
            session__pb2.MediaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Streamer/start_stream',
            session__pb2.AskSwarm.SerializeToString,
            session__pb2.ChunkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Streamer/stream',
            session__pb2.AskChunkPayment.SerializeToString,
            session__pb2.ChunkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pay_chunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Streamer/pay_chunk',
            session__pb2.ChunkResponse.SerializeToString,
            session__pb2.AskChunkPayment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
