syntax = "proto3";

/* Data structures */

message Invoice {
    string client_id = 1;
    string invoice = 3;
    int32 amount = 4;
}

message Receipt {
    Invoice invoice = 1;
    string receipt = 2;
}

message Image {
    int32 width =  1;
    int32 heigh =  2;
    int32 channels = 3;
    string type =  4;
    bytes data =  5;
}
    
message Swarm {
    string merkle_root = 1;
    string filename = 2;
    string filepath = 3;
    int32 filesize = 4;
    int32 chunksize = 5;
    int32 total_chunks = 6;
    repeated Chunk chunks = 7;
    int32 chunk_price = 8;
    Image poster = 9;
    int32 total_price = 10;
    Invoice invoice = 11;
}

message Chunk {
    string chunk_id = 1;
    int32 chunk_seq = 2;
    string chunk_data = 3;
    bytes data = 4;
}

message Macaroon {
    string macaroon = 1;
}


message Peer {
    string peer_id = 1;
    string ip = 2;
    int32 port = 3;
    Macaroon macaroon = 2; 
}

/* Messages */ 

//=> 1. Handshake
message Handshake {
    Peer client_peer = 1;
    string handshake = 2;
}

//<= 2. Ask for all available media to the peer
message AskMedia {
    Peer client_peer = 1;
}

//=> 3. List of media files available for stream (Already in RAM)
message OkMedia {
    Peer server_peer = 1;
    repeated Swarm swarms = 2;
}

//<= 4. Ask for a Chunk session streaming
message AskSwarm {
    Peer client_peer = 1;
    string merkle_root = 2;
    Receipt receipt = 3;
}

//=> 4. Send a chunk of data
message SendChunk {
    Peer server_peer = 1;
    string swarm_id = 2;
    Chunk chunk = 3;
    Invoice invoice = 4;
    string next_chunk_id = 5;
}

//=> 4. Pay a chunk of data 
message PayChunk {
    Peer client_peer = 1;
    string chunk_id = 2;
    Receipt receipt = 4;
}