syntax = "proto3";

/* Data structures */

message LNInvoice {
    string client_id = 1;
    double timestamp = 2;
    string invoice = 3;
    int32 amount = 4;
}

message Receipt {
    LNInvoice invoice = 1;
    string receipt = 2;
}

message Image {
    int32 width =  1;
    int32 height =  2;
    bytes data =  3;
}


message Video {
    string file_name = 1;
    string merkle_root = 2;
    string file_path = 3;
    int32 file_size = 4;
    float duration = 5;
    int32 width =  6;
    int32 height =  7;
    int32 fps = 8;
    int32 n_frames = 9;
    int32 total_chunks = 10;
    int32 chunk_size = 11;
    int32 chunk_price = 12;
    // repeated Chunk chunks = 13;
}

message Swarm {
    string swarm_id = 1;
    Video video = 2;
    Image poster = 3;
    int32 total_price = 4;
    LNInvoice invoice = 5;
}

message Chunk {
    string chunk_id = 1;
    int32 chunk_seq = 2;
    string chunk_data = 3;
    bytes data = 4;
}

message Macaroon {
    string id = 1;
}


message Peer {
    string peer_id = 1;
    string ip = 2;
    int32 port = 3;
    Macaroon macaroon = 4; 
}


/* Messages */ 

//=> 1. Handshake
message HandshakeRequest {
    Peer client_peer = 1;
}

//<= 2. Handshake Response
message HandshakeResponse {
    Peer server_peer = 1;
    string handshake_status = 2;
}


//<= 2. Ask for all available media to the peer
message MediaRequest {
    Peer client_peer = 1;
}

enum RequestStatus {
    OK = 0;
    ERROR = 1;
}

//=> 3. List of media files available for stream (Already in RAM)
message MediaResponse {
    Peer server_peer = 1;
    RequestStatus status = 2;
    repeated Swarm swarms = 3;
}

//<= 4. Ask for a Chunk session streaming
message AskSwarm {
    Peer client_peer = 1;
    string swarm_id = 2;
    Receipt receipt = 3;
}

//=> 4. Send a chunk of data (!!)
message ChunkResponse {
    Peer server_peer = 1;
    string swarm_id = 2;
    Chunk chunk = 3;
    LNInvoice invoice = 4;
    string next_chunk_id = 5;
}

//=> 4. Pay a chunk of data 
message AskChunkPayment {
    Peer client_peer = 1;
    string chunk_id = 2;
    string swarm_id = 3;
    Receipt receipt = 4;
}


service Streamer {
    // Connect and accept client Messages
    rpc handshake (HandshakeRequest) returns (HandshakeResponse) {}
    
    // List all media available for streaming to the peer
    rpc looking (MediaRequest) returns (MediaResponse) {}

    // Start a streaming session 
    rpc start_stream (AskSwarm) returns (ChunkResponse) {}
    
    // Streaming session of a Swarm server-side
    rpc stream (stream AskChunkPayment) returns (stream ChunkResponse) {}

    // Streaming session of a Swarm client-side
    rpc pay_chunk (stream ChunkResponse) returns (stream AskChunkPayment) {}

}